% Run using the command
% dlv problem1.txt -filter=seating

#const n=6.

person(1..n).
chair(1..n).

% -----------------------------------------------------
% Test problem

married(1, 2).
married(3, 4).

dislikes(1, 3).
dislikes(1, 4).
dislikes(1, 5).
dislikes(2, 4).
dislikes(2, 5).
dislikes(2, 6).
dislikes(3, 5).
dislikes(3, 6).

% End of test problem
% -----------------------------------------------------

% Instruction:
% Use the predicate seated(P, C) to say that person P is seating on chair number C

%%% GENERATE candidate solutions
seated(P,1) | seated(P,2) | seated(P,3) | seated(P,4) | seated(P,5) | seated(P,6) :- person(P).

%%% TEST whether a candidate solution is a real solution or not

adjacent(1,2).
adjacent(2,3).
adjacent(3,4).
adjacent(4,5).
adjacent(5,6).
adjacent(6,1).

adjacent(X, Y) :- adjacent(Y, X).


% A chair cannot be assigned two different people
:- seated(P1, C), seated(P2, C), person(P1), person(P2), chair(C), P1 != P2.

% A person cannot be assigned two chairs
:- seated(P, C1), seated(P, C2), C1 != C2, person(P), chair(C1), chair(C2).

% Married people have to sit next to each other
:- married(P1, P2), seated(P1, C1), seated(P2, C2), not adjacent(C1, C2).

% People who dislike each other can't sit in adjacent seats
:- seated(P1, C1), seated(P2, C2), dislikes(P1, P2), adjacent(C1, C2).


% -----------------------------------------------------
% For easy display

% seating(P1, P2, P3, P4, P5, P6) says that person P1 sits on chair 1, P2 on chair 2, etc.

seating(P1, P2, P3, P4, P5, P6) :- seated(P1, 1), seated(P2, 2), seated(P3, 3), seated(P4, 4), seated(P5, 5), seated(P6, 6).







